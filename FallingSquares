import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import javax.swing.*;

public class Main extends JFrame{
    public static void main(String[] args) {
        new Main();
    }
    private Main(){
        super("Squares");
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        setPreferredSize(new Dimension(400, 400));

        MyPanel pan = new MyPanel();
        add(pan);
        pan.addMouseMotionListener(new Mouse());

        Score sc = new Score();
        add(sc, BorderLayout.SOUTH);

        SwingUtilities.invokeLater( () -> {
            pack();
            setLocationRelativeTo(null);
            setVisible(true);
        });
    }
}

class MyPanel extends JPanel {
    static final LinkedList<Blocks> bl = new LinkedList<>();

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.BLUE);
        for (Blocks b : bl) {
            g.fillRect(b.getCordX(), b.getCordY(), b.getHeight(), b.getWidth());
        }
    }

    public MyPanel(){
        setBackground(Color.YELLOW);

        javax.swing.Timer createBlocks = new Timer(1500, (e) -> {
            bl.add(new Blocks((int) (Math.random() * 400), 40,40));
                repaint();
            });

        createBlocks.start();

        javax.swing.Timer fallBlocks = new Timer(2, (e) -> {
           for(Blocks b : bl) {
               b.fallBy();
               repaint();
           }
        });
        fallBlocks.start();
    }
}

class Blocks {
    private int cordX;
    private int cordY;
    private int height;
    private int width;
    private final static int velocity = 1;

    public Blocks(int cordX, int height, int width){
        this.cordX = cordX;
        this.width = width;
        this.height = height;
        this.cordY = 10;
    }

    public void fallBy(){
        this.cordY += velocity;
    }

    public int getCordX(){
        return cordX;
    }

    public int getCordY(){
        return cordY;
    }

    public int getHeight(){
        return height;
    }

    public int getWidth(){
        return width;
    }
}

class Score extends JPanel{
    public static int score = 0;
    public JLabel label = new JLabel("Score: " + score + "%");

    public Score() {
        setBorder(
                BorderFactory.createTitledBorder("Score")
        );
        add(label);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        label.setText("Score: " + score + "%");
    }
}

class Mouse extends MouseAdapter {
    @Override
    public void mouseClicked(MouseEvent e) {
        try {
            for (Blocks b : MyPanel.bl) {
                if ((e.getY() > b.getCordY() && e.getY() < (b.getCordY() + 40)) && (e.getX() > b.getCordX() && e.getX() < (b.getCordX() + 40))) {
                    MyPanel.bl.remove(b);

                }
            }
        } catch (ConcurrentModificationException ignore){}
    }
}
